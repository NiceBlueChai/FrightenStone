#ifndef ENUM_TYPE_H_
#define ENUM_TYPE_H_
#pragma once

enum DEL_WAY
{
	DEL_WAY_DELETE=0,
	DEL_WAY_DELETE_MULTI=1,	//delete []
	DEL_WAY_RELEASE=2,
	DEL_WAY_NOT_OWNER=3,
};

enum WIN_WAIT_EVENT
{
	WIN_WAIT_EVENT_FAILED=-1,
	WIN_WAIT_EVENT_SUC=0,
	WIN_WAIT_EVENT_TIMEOUT=1,
};

enum BUFFER_LEN_TYPE
{
	BUFFER_LEN_TYPE_ZERO=0,
	BUFFER_LEN_TYPE_32,
	BUFFER_LEN_TYPE_64,
	BUFFER_LEN_TYPE_128,
	BUFFER_LEN_TYPE_256,
	BUFFER_LEN_TYPE_512,
	BUFFER_LEN_TYPE_1024,
	BUFFER_LEN_TYPE_2048,
	BUFFER_LEN_TYPE_4096,
	BUFFER_LEN_TYPE_8192,
	BUFFER_LEN_TYPE_9216,
	BUFFER_LEN_TYPE_10240,	//10K
	BUFFER_LEN_TYPE_64K,	//64K
	BUFFER_LEN_TYPE_128K,	//128K
	BUFFER_LEN_TYPE_256K,	//256K
	BUFFER_LEN_TYPE_512K,	//512K
	BUFFER_LEN_TYPE_1M,		//1MB
};

//缓冲数据类型
enum BUFFER_DATA_TYPE
{
	BUFFER_DATA_TYPE_NULL=0,
	BUFFER_DATA_TYPE_CONST_CHAR_PTR,
	BUFFER_DATA_TYPE_CHAR_PTR,
	BUFFER_DATA_TYPE_CONST_CHAR_ARRAY,
	BUFFER_DATA_TYPE_CHAR_ARRAY,
	BUFFER_DATA_TYPE_FLOAT,
	BUFFER_DATA_TYPE_DOUBLE,
	BUFFER_DATA_TYPE_OTHER_INTEGER,
};

enum DUMPER_BUFFER_TYPE
{
	DUMPER_BUFFER_TYPE_NONE=0,
	DUMPER_BUFFER_TYPE_SMALLER,						//最小信息
	DUMPER_BUFFER_TYPE_NORMAL,						//正常信息，信息足够
	DUMPER_BUFFER_TYPE_MOST_DETAILED,				//最详细的信息，信息比较大
};

enum NETWORK_CARD_TYPE
{
	NETWORK_CARD_TYPE_0=0,	//0号网卡
	NETWORK_CARD_TYPE_END= NETWORK_CARD_MAX_NUM+ NETWORK_CARD_TYPE_0 -1,	//最大网卡
};

//cpu 计时精度
enum TIMER_ACCURACY_TYPE
{
	TIMER_ACCURACY_TYPE_BEGIN=0,	//无
	TIMER_ACCURACY_TYPE_SEC,		//秒
	TIMER_ACCURACY_TYPE_MILL_SEC,	//毫秒
	TIMER_ACCURACY_TYPE_MICRO_SEC,	//微妙
	TIMER_ACCURACY_TYPE_NANO_SEC,	//纳秒
	TIMER_ACCURACY_TYPE_END,
};

//内存池开关
enum POOL_SWITCH_TYPE
{
	POOL_SWITCH_TYPE_CLOSE,		//默认不使用内存池
	POOL_SWITCH_TYPE_OPEN,		//启用内存池 需要配合内存池管理dll使用
};


//地址协议
NAMESPACE_BEGIN(NET_SYS)

//族类型
enum FAMILY_TYPE
{
	FAMILY_TYPE_UNSPEC=0,		//协议无关
	FAMILY_TYPE_AF_INET=2,		//IPV4
	FAMILY_TYPE_AF_INET6=23,	//IPV6
};

//协议类型
enum PROTOCOL_TYPE
{
	PROTOCOL_TYPE_IPPROTO_IP=0,		//ip协议
	PROTOCOL_TYPE_IPPROTO_IPV4 =4,	//ipv4
	PROTOCOL_TYPE_IPPROTO_IPV6 =41,	//IPV6
	PROTOCOL_TYPE_IPPROTO_UDP=17,	//udp
	PROTOCOL_TYPE_IPPROTO_TCP=6,	//tcp
};

//传输的套接字类型
enum SOCK_TYPE
{
	SOCK_TYPE_SOCK_STREAM=1,		//流
	SOCK_TYPE_SOCK_DGRAM=2,			//数据报文
};

enum AI_FLAGS_TYPE
{
	AI_FLAGS_TYPE_NONE=0,			//起始
	AI_FLAGS_TYPE_AI_PASSIVE=1,		//被动的，用于bind，通常用于server socket
	AI_FLAGS_TYPE_AI_CANONNAME=2,	//用于返回主机的规范名称
	AI_FLAGS_TYPE_AI_NUMERICHOST=4,	//地址为数字串
	AI_FLAGS_TYPE_END=8,			//结束ai_flags值域[0,8);
};

// 如上表所示，ai_flags的值的范围为0~7，取决于程序如何设置3个标志位，比如设置ai_flags为“AI_PASSIVE | AI_CANONNAME”，ai_flags值就为3。三个参数的含义分别为：
// (1)AI_PASSIVE当此标志置位时，表示调用者将在bind()函数调用中使用返回的地址结构。当此标志不置位时，表示将在connect()函数调用中使用。
// 当节点名位NULL，且此标志置位，则返回的地址将是通配地址。
// 如果节点名NULL，且此标志不置位，则返回的地址将是回环地址。
// (2)AI_CANNONAME当此标志置位时，在函数所返回的第一个addrinfo结构中的ai_cannoname成员中，应该包含一个以空字符结尾的字符串，字符串的内容是节点名的正规名。
// (3)AI_NUMERICHOST当此标志置位时，此标志表示调用中的节点名必须是一个数字地址字符串。



NAMESPACE_END(NET_SYS)


//网络出错
enum NET_IO_ERR_TYPE
{
	NET_IO_ERR_TYPE_NONE = 0,		//无错误
	NET_IO_ERR_TYPE_PACKET_OVER_MAX = 1,			//单包超过最大限制 MAX_BUFFER_LEN
	NET_IO_ERR_TYPE_MEMORY_NOT_ENOUGH = 2,		//内存不足
	NET_IO_ERR_TYPE_POST_SEND = 3,				//投递send失败
	NET_IO_ERR_TYPE_SOCKET_NOT_EXIST = 4,		//socket不存在
	NET_IO_ERR_TYPE_OTHER,						//其他错误
};

//threadpost类型
enum POST_OBJ_TYPE
{
	POST_OBJ_TYPE_NONE = 0,
	POST_OBJ_TYPE_MAIN_THREAD,				//业务主逻辑线程
	POST_OBJ_TYPE_NETWORK_SENDER,			//网络发送模块
	POST_OBJ_TYPE_END,
};

#endif

